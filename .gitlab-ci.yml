stages:
  - .pre
  - pipeline_confirmation
  - validate
  - plan
  - deploy
  - .post

before_script: 
  - |   
    ## Ignore Powershell outputs / warnings from objects that exist, or are not found
    $ErrorActionPreference = 'SilentlyContinue'

    ## Variables will come from Google Form, within this pipeline
    # - |
    #   if ($CI_COMMIT_BRANCH -eq "master" -or $CI_COMMIT_BRANCH -eq "master_tst") {
    #     . .\deploymentVars.ps1
    #     write-host "This Deployment has been triggered from the '$CI_COMMIT_BRANCH branch', and inturn is using 'Prd' variables via 'deploymentVars.ps1'" -ForegroundColor Green
    #   }
    #   else {
    #     . .\testDeploymentVars.ps1 
    #     write-host "This Deployment has been triggered from the '$CI_COMMIT_BRANCH branch', and inturn is using 'Dev' variables via 'testDeploymentVars.ps1'" -ForegroundColor Green
    #   }

  - |
    ## Defining dynamic variables used in this deployment, via Parsed Google Forms JSON Payload, using Powershell
    echo $env:fields 
    $payload = "$env:fields" | ConvertFrom-Json
    $payload | Out-File -FilePath .\deploymentVars.ps1
    $env = $payload | where { $_.Name -eq "Environment" } | Select -ExpandProperty value 
    $subscriptionNumber = $payload | where { $_.Name -eq "subscriptionNumber" } | Select -ExpandProperty value
    $region = $payload | where { $_.Name -eq "AwsRegion" } | Select -ExpandProperty value
    $version = $payload | where { $_.Name -eq "ReleaseVersion" } | Select -ExpandProperty value    
    $notifyEmail = $payload | where { $_.Name -eq "NotificationEmail" } | Select -ExpandProperty value    
    #$buildType = $payload | where { $_.Name -eq "BuildType" } | Select -ExpandProperty value 
    #$build = $buildType + "BuildConfig.csv" 

  - |
    ## Defining static variables used in deployment, using Powershell
    $core_rg_Name = "$projectPrefix-$envIdentifier-core-rg-$regionSuffix"
    $tf_state_sa_sku = 'Standard_RAGRS'
    $tf_state_sa_name = $sa_prefix + $envIdentifier + "tfstate" + $regionSuffix
    $tf_state_sa_containers = "terraform-state-$projectPrefix-$envIdentifier"
    $subscriptionPrefix = $($subscriptionNumber) -split '-')[-1]
    $storageAccountName = "sub-$($subscriptionPrefix)-terraform-cloud-tfstate-files"
    #$sshFileName = "id_rsa"
    #$sshFilePath = "$env:USERPROFILE/.ssh/$sshFileName"

    ##Show Variables being used, based on $CI_COMMIT_BRANCH / Imported Vars file
    #echo $tf_state_rg 
    write-host "tf_state_sa_name = '$tf_state_sa_name'" -ForegroundColor Green
    #echo $tf_state_sa_name 
    write-host "tf_state_sa_container = '$tf_state_sa_container'" -ForegroundColor Green
    #echo $tf_state_sa_container 

  - |
    ## Static 'deployments' repository variables used for Git Clone, Pull, Push operations
    $localDir                  = "C:\Gitlab-Runner" 
    $gitURL                    = "https://gitlabcssdev.fan.gov/cpmo_azure/deployments.git"
    #$gitURL                    = "git@gitlab.com:aws_terraform1/terraform_cloud.git"
    $gitDir                    = ($gitURL -split '/')[-1] 
    $gitDir                    = $gitDir.Replace(".git","") # Replaces '.git' with a blank entry ""
    $gitCloneDir               = Join-Path $localDir $gitDir
    $newDeploymentDir          = Join-Path $gitCloneDir "sub-$($subscriptionPrefix)/"
    #$newDeploymentDir          = Join-Path $gitCloneDir "/css-customers/sub-$($subscriptionPrefix)/"

  - |
    ## Writes above variables to $hash table, and output "variables","values" to .csv file, to capture deployment parameters
    $hash = @{}
    $hash.Add('$env',$($env))
    $hash.Add('$subscriptionPrefix',$($subscriptionPrefix))
    $hash.Add('$region',$($region))
    $hash.Add('$version',$($version))
    $hash.Add('$notifyEmail',$($notifyEmail))
    $hash.Add('$sshFileName',$($sshFileName))
    $hash.Add('$sshFilePath',$($sshFilePath))
    $hash.Add('$storageAccountName',$($storageAccountName))
    $hash

  - |
    ## Writes the variable hashtable to 'deploymentVars.csv', to capture parameters used in this deployment, via the submitted 'GoogleForm'
    cd "$CI_PROJECT_DIR"
    $hash.GetEnumerator() | 
    
    # Renames the hashtable Key and Value Column Headers, to "Variable and Value"
    Select-Object -Property @{N='Variable';E={$_.Key}},
    @{N='Value';E={$_.Value}} | Sort-Object Variable | Export-Csv -NoTypeInformation -Path .\googleFormDeploymentVars.csv 

    # Clears out $hash table
    # $hash.Clear()

  - |
    ## Map Variable to determine what branch to 'pull' code from, for deployment, from "deployment_code" Repository
    if ($version -eq "Latest_Release"){
      $pullBranch = "master"
    }
    else {
      $pullBranch = "$($version)" #Release_$($version) #Develop
    }

  - |
    ## Map Variable to determine what branch to 'push' deployment files to, in "deployments" (Customer) repo
    if ($env -eq "production"){
      $pushBranch = "master"
    }
    elseif {
      $pushBranch = "dev"
    }

    # ## Map Variable to determine what branch to 'push' deployment files to, in "deployments" (Customer) repo
    # if ($env -eq "production"){
    #   $pushBranch = "master"
    # }
    # else {
    #   $pushBranch = "dev"
    # }

git_operations:
  stage: .pre
  tags: 
  - shell_test
  script:
    - |
      ## Configure Gitlab Runner Instance with Gitlab User info, for Git Push, despite 'Write Access' enabled deploy key     
      git config --global user.name "${GITLAB_USER_ID}"
      git config --global user.email "${GITLAB_USER_EMAIL}"

    - |
      ## Creates a directory to clone the 'deployments' git repository into, if it does not already exist
      if (test-path $localDir) {
        Write-Output "Deployment Directory '$localDir' already exists. You are all set to clone the Git Repo"
      }
      else {
        $dir = New-Item -ItemType Directory -Path $localDir -Force
        Write-Output "Directory '$($dir.PSPath)' has been created to house this new Terraform deployment"
      }

    - |
      ## Perform a git clone for the 'Deployments Repo (Customer Deployments Repo), if git clone has not already been performed for this Repository

      # Enter new 'deployment' directory
      Set-Location "$localDir" # cd
      write-host "Entering Directory '$localDir'" -ForegroundColor Green

      if (test-path $gitCloneDir) {
        Write-Output "Git Clone appears to already have been performed, based on the existing folder structure"
        Set-Location "$gitCloneDir" # cd
        $existingBranch = git ls-remote --heads origin $pushBranch
      }
        if($existingBranch -ne $null){
          Write-Host "Git Branch '$pushBranch' already exists. Checking out, and updating branch now" -ForegroundColor Green
          git checkout $pushBranch
          git pull deployments $pushBranch
        }
      else {
        # Clones the 'deployments' Repo (Customer Deployments Repo), into the new directory '$localDir'
        Set-Location "$localDir" # cd
        git clone $gitURL
        Set-Location "$gitCloneDir" # cd
        git remote add deployments $gitURL
        git checkout $pushBranch
        #git clone --single-branch --branch $pushBranch $gitURL
      }

      ## Allows time for git operations to complete, prior to copying files/folders to 'deployments' repo
      Start-sleep 5

create_tfstate_sa: 
  stage: prep
  tags: 
  - shell_test
  script:
    - |
      # Create core Resource Group
      $rg = Get-AzResourceGroup -Name $core_rg_Name -Location $azRegion
      if ($rg -ne $null) {
        Write-Output "Resource Group '$($rg.ResourceGroupName)' already exists"
      }
      else{
        New-AzResourceGroup -Name $core_rg_Name -Location $azRegion
      }

      # Create Terraform state storage account
      $tfsa = Get-AzStorageAccount -ResourceGroupName $core_rg_Name -Name $tf_state_sa_name
      if ($tfsa -ne $null) {
        Write-Output "Storage Account '$($tfsa.StorageAccountName)' already exists" -Verbose
      }
      else {
        $tfsa = New-AzStorageAccount -ResourceGroupName $core_rg_Name `
          -Name $tf_state_sa_name `
          -Location $azRegion `
          -SkuName $tf_state_sa_sku
          Write-Output "Storage Account '$($tfsa.StorageAccountName)' has been created"
      }

      # Create storage account containers for 'Terraform state files', and 'deployment-scripts' used in vm_cse_scripts
      Foreach ($container in $tf_state_sa_containers) {
        $saContainer = Get-AzStorageContainer -Name $container -Context $tfsa.context
        if ($saContainer -ne $null) {
          Write-Output "Container(s) '$($saContainer.Name)' already exists"
        }
        else {
          $saContainer = New-AzStorageContainer -Name $container -Context $tfsa.Context -Permission Blob
          Write-Output "Container(s) '$($saContainer.Name)' has been created"
        }
      }

error_prevention:
  stage: pipeline_confirmation
  tags: 
    - shell_test
  when: manual
  script:
  - |
    # This job runs in the event that no jobs are triggered by Only:Changes location. This job is shown as a indication that the pipeline ran, but no real jobs were triggered.
    exit 0

tf_validate_plan_network:
  stage: validate
  only:
    changes: 
    - /deployment-template/network/* # any files inside network dir
  environment:
    name: $CI_COMMIT_BRANCH
  tags: 
    - shell_test
  script:
    - |
      # Enter 'network' Directory:
      cd "$CI_PROJECT_DIR/deployment-template/network"
      write-host "Entering Directory '$CI_PROJECT_DIR/deployment-template/network'" -ForegroundColor Green
    - |
      ## Terraform init
      terraform init -upgrade `
      -backend-config="access_key=$env:tf_state_key" `
      -backend-config="environment=public" `
      -backend-config="resource_group_name=$tf_state_rg" `
      -backend-config="storage_account_name=$tf_state_sa_name" `
      -backend-config="container_name=$tf_state_sa_container" `
      -backend-config="key=$projectPrefix-$envIdentifier-network-$regionSuffix.terraform.tfstate"
    - |
      ## Terraform Validate
      terraform validate
    - |
      ## Terraform plan
      terraform plan -out=tfplan `
      -var "tenant_id=$tenant_Id" `
      -var "subscription_Id=$subscription_Id" `
      -var "tf_sp_appid=$env:tf_sp_appid" `
      -var "tf_sp_secret=$env:terraform_sp_secret" `
      -var "tfstate_access_key=$env:tf_state_key" `
      -var "project_ident=$projectPrefix" `
      -var "region_suffix=$regionSuffix" `
      -var "env_ident=$envIdentifier"
    - |
      #terraform show -json tfplan | jq ".resource_changes | map ({(.type|tostring) : .}) | add" > tfplan.json
      #terraform show -json tfplan | jq "( [.resource_changes[]?.change.actions?] | flatten ) | { "create":(map(select(.=="create")) | length), "update":(map(select(.=="update")) | length), "delete":(map(select(.=="delete")) | length) } | add" > tfplan.json
  artifacts:
    paths:
      - deployment-template/network/.terraform
      - deployment-template/network/tfplan
      - deployment-template/network/tfplan.json
    reports:
      terraform: deployment-template/network/tfplan.json

.tf_apply_network:
  stage: deploy
  only:
    changes: 
    - /deployment-template/network/* # any files inside network dir
  environment:
     name: $CI_COMMIT_BRANCH
  tags: 
    - shell_test
  dependencies:
    - tf_validate_plan_network
  script:
    - |
      # Enter 'network' Directory:
      cd "$CI_PROJECT_DIR/deployment-template/network"
      write-host "Entering Directory '$CI_PROJECT_DIR/deployment-template/network'" -ForegroundColor Green
    - |
      ## Terraform apply
      terraform apply tfplan 
  
tf_apply_network_all:
  extends: .tf_apply_network
  except:
  - master
  - master_tst 
  when: always

tf_apply_network_master:
  extends: .tf_apply_network
  only:
  - master
  - master_tst 
  - merge_requests
  when: manual

cleanup_build_job:
  stage: .post
  only:
    changes: 
    - /deployment-template/network/* # any files inside network dir
  environment:
    name: $CI_COMMIT_BRANCH
  except:
    - master 
    - master_tst 
  when: manual
  tags: 
    - shell_test
  dependencies:
    - tf_validate_plan_network
  script:
    - |
      # Enter 'network' Directory:
      cd "$CI_PROJECT_DIR/deployment-template/network"
      write-host "Entering Directory '$CI_PROJECT_DIR/deployment-template/network'" -ForegroundColor Green
    - |
      ## Terraform destroy
      terraform destroy -auto-approve `
      -var "tenant_id=$tenant_Id" `
      -var "subscription_Id=$subscription_Id" `
      -var "tf_sp_appid=$env:tf_sp_appid" `
      -var "tf_sp_secret=$env:terraform_sp_secret" `
      -var "tfstate_access_key=$env:tf_state_key" `
      -var "project_ident=$projectPrefix" `
      -var "region_suffix=$regionSuffix" `
      -var "env_ident=$envIdentifier"  
